type Query {
    experiments(user: String): [Experiment]
    voltamogramms(experiment: String): [Voltamogramm]
    voltamogramm(voltamogrammId: String): Voltamogramm
    measures(scan: String): [Measure]
    measure(measureId: String): Measure
    scan(scanId: String): Scan
}

type Mutation {
    createExperiment(
        user: String,
        name: String,
        description: String,
        startDate: String,
        endDate: String
    ): Experiment

    updateExperiment(
        id: String,
        name: String,
        description: String,
        startDate: String,
        endDate: String
    ): Experiment

    createVoltamogramm(
        experiment: String,
        cyclic: Boolean,
        date: String,
        description: String,
        solution: String,
        numberOfElectrodes: Int,
        equipmentId: String
    ): Voltamogramm

    createScan(
        voltamogramm: String,
        date: String,
        startPotential: Float,
        endPotential: Float,
        reverseDirection: Boolean,
        stirring: Boolean,
        rotation: Boolean,
        channelId: String,
        channelLabel: String,
        temperature: Float,
        pressure: Float,
        measureMode: String,
        modeInput: MeasureModeInput
    ): Scan
}

type Experiment {
    id: String,
    user: String,
    name: String,
    description: String,
    startDate: String,
    endDate: String
}

type Voltamogramm {
    id: String,
    experiment: String,
    cyclic: Boolean,
    date: String,
    description: String,
    solution: String,
    numberOfElectrodes: Int,
    equipmentId: String,
    scans: [Scan]
}

type Scan {
    id: String,
    voltamogramm: String,
    startPotential: Float,
    endPotential: Float,
    reverseDirection: Boolean,
    stirring: Boolean,
    rotation: Boolean,
    channelId: String,
    channelLabel: String,
    temperature: Float,
    pressure: Float,
    measureMode: String,
    measures: [Measure],
    regime: MeasureMode
}

type Measure {
    id: String,
    scan: String,
    points: [[Float]]
}

type MeasureMode {
    id: String,
    scan: String,
    normalPulseLife: String,
    normalPulsePeriod: String,
    differentialPulseAmplitude: String,
    differentialPulseWidth: String,
    differentialPulsePeriod: String,
    squareWaveAmplitude: String,
    staircaseWaveEstep: String,
    squareWaveTimePeriod: String,
    staircaseTimeStep: String,
    staircaseEstep: String,
    acAmplitude: String,
    acFrequency: String
}

input MeasureModeInput {
    scan: String,
    normalPulseLife: String,
    normalPulsePeriod: String,
    differentialPulseAmplitude: String,
    differentialPulseWidth: String,
    differentialPulsePeriod: String,
    squareWaveAmplitude: String,
    staircaseWaveEstep: String,
    squareWaveTimePeriod: String,
    staircaseTimeStep: String,
    staircaseEstep: String,
    acAmplitude: String,
    acFrequency: String
}